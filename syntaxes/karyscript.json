{
    "fileTypes": [
        "k"
    ],
    "name": "KaryScript",
    "patterns": [{
        "include": "#expression"
    }],
    "repository": {
        "comment": {
			"match": "//.*$\\n?",
            "name": "comment.line.double-slash.karyscript"
        },
        "number": {
            "match": "\\b(0x[0-9a-f]+|[0-9]+(?:\\.[0-9]+)?)\\b",
            "name": "constant.numeric.karyscript"
        },
        "keywords": {
            "match": "\\b(?:also(?:\\s)+(?:if|unless)|return|throw|yield|delete|new|of|in|up|down|when|to|via|clone|import|void|await|async|catch|finally|case|default|continue|debugger|else)\\b",
            "name": "keyword.control.karyscript"
        },
        "punctuation-comma": {
			"name": "punctuation.separator.comma.js",
			"match": ","
		},
		"punctuation-accessor": {
			"name": "punctuation.accessor.js",
			"match": "\/"
		},
        "constants-identifiers": {
            "match": "\\b(?:true|false|on|off|right|wrong|undefined|ufo|null|nothing|NaN)\\b",
            "name": "constant.language.karyscript"
        },
        "controls-structures": {
            "begin": "\\b(if|unless|for|while|try)\\b",
			"beginCaptures": {
				"1": {
                    "name": "keyword.control.karyscript"
                }
			},
            "patterns": [{
               "include": "#expression"
            }],
            "end": "\\b(end)\\b",
            "endCaptures": {
                "1": {
					"name": "keyword.control.karyscript"
				}
            }
        },
        "declaration-types": {
            "match": "\\b(fix|mut)\\b",
            "name": "storage.type.karyscript"
        },
        "identifier": {
            "match": "\\b((?:(?:\\/(?:\\s)*)?[0-9a-zA-Z\\$\\-_](?:[\\w\\$\\-_])*(?:\\s)*\\/(?:\\s)*)*)([0-9a-zA-Z\\$\\-_](?:[\\w\\$\\-_])*)\\b",
            "captures": {
                "1": {
					"name": "variable.other.object.karyscript"
				},
                "2": {
                    "name": "variable.other.property.karyscript"
                }
            }
        },
        "zone-declaration": {
            "begin": "\\b(zone)(?:\\s)+([0-9a-zA-Z\\$\\-_][\\w\\$\\-_\\/]*)(?:\\s)*\\:",
            "beginCaptures": {
                "1": {
					"name": "storage.modifier.karyscript"
				},
                "2": {
                    "name": "entity.name.function.karyscript"
                }
            },
            "patterns": [ {
               "include": "#expression"
            }],
            "end": "\\b(end)\\b",
            "endCaptures": {
                "1": {
					"name": "storage.modifier.karyscript"
				}
            }
        },
        "function-declaration": {
            "name": "meta.function.karyscript",
            "begin": "\\b(?:(out)(?:\\s)+)?(def|async)(?:\\s)+([a-zA-Z_\\-$][\\w$]*)((?:(?:\\s)+[a-zA-Z_\\-$][\\w$]*)*)(?:\\s)*\\:",
			"beginCaptures": {
				"1": {
                    "name": "storage.type.karyscript"
                },
                "2": {
					"name": "storage.modifier.karyscript"
				},
                "3": {
                    "name": "entity.name.function.karyscript"
                },
                "4": {
                    "name": "variable.parameter.karyscript"
                }
			},
            "patterns": [ {
               "include": "#expression"
            }],
            "end": "\\b(end)\\b",
            "endCaptures": {
                "1": {
					"name": "storage.modifier.karyscript"
				}
            }
        },
        "s-expression": {
            "name": "s-expression.karyscript",
            "begin": "(\\()(?:\\s)*((?:\\/(?:\\s)*)?(?:[0-9a-zA-Z\\$_\\-](?:[\\w\\$_\\-])*(?:\\s)*\\/(?:\\s)*)*)([0-9a-zA-Z\\$_\\-](?:[\\w\\$_\\-])*)\\b",
            "beginCaptures": {
                "1": {
                    "name": "meta.brace.round.karyscript"
                },
                "2": {
                    "name": "variable.other.object.karyscript"
                },
                "3": {
                    "name": "entity.name.function.karyscript"
                }
            },
            "patterns": [{
               "include": "#expression"
            }],
            "end": "(\\))",
            "endCaptures": {
                "1": {
					"name": "meta.brace.round.karyscript"
				}
            }
        },
        "class-declaration": {
            "name": "meta.class.karyscript",
            "begin": "\\b(?:(out)(?:\\s)+)?(class)(?:\\s)+([0-9a-zA-Z\\$\\-_][\\w\\$\\-_]*)(?:(?:\\s)+(extends)(?:\\s)+([0-9a-zA-Z\\$\\-_][\\w\\$\\-_]*)(?:\\s)*|(?:\\s)*)?\\:",
			"beginCaptures": {
				"1": {
                    "name": "storage.type.karyscript"
                },
                "2": {
					"name": "storage.type.class.karyscript"
				},
                "3": {
                    "name": "entity.name.type.class.karyscript"
                },
                "4": {
                    "name": "storage.type.class.karyscript"
                },
                "5": {
                    "name": "entity.name.type.class.karyscript"
                }
			},
            "patterns": [{
               "include": "#expression"
            }],
            "end": "\\b(end)\\b",
            "endCaptures": {
                "1": {
					"name": "storage.type.class.karyscript"
				}
            }
        },
        "comparison-operator": {
            "match": "(?:\\=\\=|\\!\\=|\\>|\\>\\=|\\<|\\<\\=)",
            "name": "keyword.operator.comparison.karyscript"
        },
        "assignment-operator": {
            "name": "keyword.operator.assignment",
            "match": "(?:\\=|\\/\\=)"
        },
        "literal": {
            "name": "literal.karyscript",
            "patterns": [
                {
                    "include": "#number"
                }
            ]
        },
        "expression": {
            "name": "expression.karyscript",
            "patterns": [
                {
                    "include": "#controls-structures"
                },
                {
                    "include": "#function-declaration"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#literal"
                },
                {
                    "include": "#class-declaration"
                },
                {
                    "include": "#comparison-operator"
                },
                {
                    "include": "#assignment-operator"
                },
                {
                    "include": "#constants-identifiers"
                },
                {
                    "include": "#zone-declaration"
                },
                {
                    "include": "#s-expression"
                },
                {
                    "include": "#identifier"
                }
            ]
        }
    },
    "scopeName": "source.karyscript"
}
